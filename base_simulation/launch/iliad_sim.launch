<?xml version="1.0"?>
 <!--
     Launches a gazebo world and a forklift.
-->

<launch>
  <arg name="robot_id"  default="1"/>
  <arg name="map_frame_id" default="map"/>

  <!-- TF prefix of robot -->
  <arg name="prefix" default="robot$(arg robot_id)"/>

  <!-- PARAMS ...................................................... -->
  <arg name="gazeboGui" default="true"/>
  <arg name="rvizGui" default="true"/>
  <arg name="gazeboPause"  default="false"/>
  <arg name="map_frame" default="map"/>
  <arg name="map_topic" default="map"/>
  <arg name="useTwist" default="true"/>

  <!-- Enable/disable sensor simulation -->
  <arg name="velodyne" default="true"/> <!-- requires velodyne_simulator -->
  <arg name="kinect2"  default="true"/>   <!-- Uses iai kinect2 description -->
  <arg name="kinect1"  default="false"/> <!-- deprecated (only used for pallet detection?) -->

  <arg name="cmd_vel_topic" default="controller/cmd_vel" />

  <arg name="world_name" default="$(find base_simulation)/worlds/ncfm_model_1_actor_short.world"/>
  <arg name="yaml_map_file" default="$(find base_simulation)/maps/extra_room.yaml"/>
  <arg name="rviz_config_file" default="$(find base_simulation)/rviz/iliad_cititruck.rviz"/>

  <arg name="robot_pose_x" default="7.53"/>
  <arg name="robot_pose_y" default="-2.7"/>
  <arg name="robot_pose_roll" default="0.0"/>
  <arg name="robot_pose_pitch" default="0.0"/>
  <arg name="robot_pose_yaw" default="0.0"/>

  <rosparam command="load" file="$(find orunav_params)/config/global.cfg"/>
  <rosparam command="load" file="$(find orunav_params)/config/citi1_simulation.cfg" />


  <!-- INCLUDES .................................................... -->


  <!-- WORLD A variation of the original with only one person as described avobe  -->
  <include file="$(find base_simulation)/launch/worlds/add_world.launch">
        <arg name="gui" value="$(arg gazeboGui)"/>
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="gazeboPause"  value="$(arg gazeboPause)"/>
  </include>



  <!-- LOAD MAP -->
  <include file="$(find base_simulation)/launch/worlds/map_server.launch">
    <arg name="yaml_map_file" value="$(arg yaml_map_file)"/>
    <arg name="map_topic" value="$(arg map_topic)"/>
    <arg name="robot_pose_x" value="$(arg robot_pose_x)"/>
    <arg name="robot_pose_y" value="$(arg robot_pose_y)"/>
    <arg name="robot_pose_roll" value="$(arg robot_pose_roll)"/>
    <arg name="robot_pose_pitch" value="$(arg robot_pose_pitch)"/>
    <arg name="robot_pose_yaw" value="$(arg robot_pose_yaw)"/>
    <arg name="frame_id" value="$(arg map_frame_id)"/>
  </include>

<!-- FAKE LOCALIZATION  -->
 <node pkg="tf" type="static_transform_publisher" name="origin_broadcaster"
    args="0 0 0 0 0 0 /world $(arg map_frame) 100" />



  <!-- LOAD GAZEBO Model  -->
  <!-- This loads robot_description only-->
  <include file="$(find iliad_launch_system)/launch/robots/cititruck/$(arg prefix)/$(arg prefix).launch">
        <arg name="sim" value="true"/>
        <arg name="software" value="false"/>
  </include>

  <include file="$(find iliad_launch_system)/launch/robots/cititruck/cititruck_spawn.launch">
          <arg name="robot_id"      value="$(arg robot_id)"/>
          <arg name="robot_pose_x"   value="$(arg robot_pose_x)"/>
          <arg name="robot_pose_y"   value="$(arg robot_pose_y)"/>
          <arg name="robot_pose_yaw" value="$(arg robot_pose_yaw)"/>
  </include>


 <group ns="$(arg prefix)">
     <!--
          This param needs to be set under this group, or
          robot_state_publisher wont publish tf properly
     -->
    <param name="tf_prefix" value="$(arg prefix)" />



  <!-- This way I make gazebo receive data in the same topic than real robot -->
  <node name="relay_pub" pkg="topic_tools" type="relay" args="$(arg cmd_vel_topic)"/>





      <!-- Filters out laser points hitting robot frame/wheels-->
      <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="safety_filter">
        <rosparam command="load" file="$(find base_simulation)/params/safety_laser_filter.yaml" />
        <remap from="scan" to="/$(arg prefix)/sensors/laser2d_floor" />
        <remap from="scan_filtered" to="/$(arg prefix)/sensors/laser2d_floor_fil" />
      </node>

      <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="nav_filter">
        <rosparam command="load" file="$(find base_simulation)/params/uol_nav_laser_filter.yaml" />
        <remap from="scan" to="/$(arg prefix)/sensors/laser2d_top" />
        <remap from="scan_filtered" to="/$(arg prefix)/sensors/laser2d_top_fil" />
      </node>

      <!-- Casts from vtrans,vrot from move base to robot (vtrans,vrot) for motrix wheel in robot      -->
      <node pkg="twist_controller" type="velParser_alt.py" name="velParser_node" output="screen" if="$(arg useTwist)">
          <param name="wheelsAxesDist" value="1.2"/>
          <param name="inPlacePhi" value="1.57"/>
          <param name="phiTol" value="0.01"/>
          <param name="useOmega" value="True"/>
          <param name="moveWhileOrienting" value="True"/>
          <param name="steer_pose_cmd_topic" value="/$(arg prefix)/steer_pose"/>
          <param name="in_cmd_topic" value="/$(arg prefix)/move_base/cmd_vel"/>
          <param name="out_cmd_topic" value="$(arg cmd_vel_topic)"/>
      </node>


      <!-- Publishes relative motor wheel position related to robot frame coordinates. Used by velParser -->
      <node pkg="robot_pose_publisher" type="robot_pose_publisher" name="steer_pose_publisher" output="screen">
          <param name="map_frame" value="$(arg prefix)/base_footprint"/>
          <param name="base_frame" value="$(arg prefix)/steer_link"/>
          <param name="is_stamped" value="true"/>
          <remap from="robot_pose" to="steer_pose"/>
      </node>


 </group>



<!-- Visualization -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config_file)" if="$(arg rvizGui)"/>

</launch>
