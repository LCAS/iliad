<?xml version="1.0"?>


<!-- 
Launch file for testing spencer people tracker on L-CAS cititruck. 
This file is based on "tracking_on_robot.launch" on spencer_people_tracking_launch package.



Spencer needs a laserscan and rgbd: 
- laserscans are provided from minimal cititruck launcher loaded from package kmo_navserver
  Topic  /kmo_navserver/laserscan0
  frame  laserscan0

- rgbd data comes from kinect2
	Topic  /kinect2/hd/... (camera_info /compressed image_color image_mono image_color/compressed image_mono/compressed image_color_rect image_mono_rect image_color_rect/compressed image_mono_rect/compressed points)
	frame  kinect2_rgb_optical_frame

TODO:
  - Improve detectors configuration
  - Add pcl human detection using velodyne
-->

<launch deprecated="NOISY!">
	
	<!-- Constants -->
	<arg name="rviz_config_file" default="$(find demo)/rviz/tracking_testing.rviz"/>

		
  <!-- TFs: Approximate sensor locations ......................... -->
  <node pkg="tf" type="static_transform_publisher" name="base_laser0"   args=" 0.1 0 0.0  0 0 0 base_link laserscan0 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_velodyne" args="-0.1 0 1.1  0.05 0 0 base_link velodyne   100"/>
  <node pkg="tf" type="static_transform_publisher" name="kinect_map1" args=" -0.02 -0.1 1.24 -1.52 0 -1.54 base_link kinect2_rgb_optical_frame 100"/>
  <node pkg="tf" type="static_transform_publisher" name="kinect_map2" args=" -0.02 -0.1 1.24 -1.52 0 -1.54 base_link kinect2_ir_optical_frame  100"/>
 
  <node pkg="tf" type="static_transform_publisher" name="basef_basel" args="0 0 0.00 0 0 0  base_footprint base_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="odom_basef" args="0.15 -0.50 0.00 0 0 0.08 1  /odom /base_footprint 100"/>
  


  <node pkg="tf" type="static_transform_publisher" name="map_odom" args="0 0 0 0 0 0  /map /odom 100"/>


	<!-- Recorded map with Tiago. Not really for navigation... -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find demo)/maps/INB3123.yaml"/>



    <!-- Hokuyo laser as dummy KM laser -->
  <node name="urg_node" pkg="urg_node" type="urg_node" output="screen">
    <param name="serial_port" value="/dev/ttyACM0"/>
    <param name="serial_baud" value="115200"/>
    <param name="calibrate_time" value="true"/>
    <param name="publish_intensity" value="false"/>
    <param name="publish_multiecho" value="false"/>
    <param name="angle_min" value="-1.5707963"/>
    <param name="angle_max" value="1.5707963"/>
    
    <param name="frame_id" value="laserscan0"/>   
    <remap from="scan" to="/kmo_navserver/laserscan0"/>
    
  </node>
  
  <!-- Kinect2: this is temporary. Simplify this...  -->
  <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch">
       <arg name="depth_method" value="cuda"/>
       <arg name="reg_method" default="opencl"/>
  </include>
  <!-- relaying is needed to match b***y topics from kinect2 fancy way to spencer -->
  <node pkg="topic_tools" type="relay" name="k2_repub1" output="screen" args="/kinect2/sd/image_color_rect  /kinect2/sd/rgb/image_rect_color"/>      
  <node pkg="topic_tools" type="relay" name="k2_repub3" output="screen" args="/kinect2/sd/camera_info    /kinect2/sd/depth/camera_info"/>
  <!--  node pkg="topic_tools" type="relay" name="k2_repub2" output="screen" args="/kinect2/sd/image_depth_rect  /kinect2/sd/depth/image_rect" -->
  <!-- Nodelet manager: needed to cast image formats-->
  <node pkg="nodelet" type="nodelet" args="manager"
      name="image_converter_manager" output="screen"/>
      
  <!-- Nodelet depth_image_proc/convert_metric -->
  <node pkg="nodelet" type="nodelet" name="image_converter" machine="localhost" args="load depth_image_proc/convert_metric image_converter_manager  --no-bond" respawn="false" output="screen">
    <remap from="image_raw" to="/kinect2/sd/image_depth_rect"/>
    <remap from="image" to="/kinect2/sd/depth/image_rect"/>
  </node>


  
  <!-- Velodyne -->
  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch">
    <arg name="laserscan_ring" default="1" />   <!-- Publishes channel 1 as a laserscan  -->

  </include>



  <!-- What follows is adapted from spencer people tracker  -->


  <!-- RGB-D detectors -->
  <include file="$(find demo)/launch/detectors/front_rgbd_detectors.launch">
               <arg name="camera_frame" default="kinect2_rgb_optical_frame"/>
               <arg name="camera_namespace" default="/kinect2/sd"/>
               <arg name="base_footprint" default="base_footprint"/>
  </include>


  <!-- Laser detectors: Im using velodyne central beam as blob source. 
       We could use leg detector with SICK300
  -->  
  <include file="$(find demo)/launch/detectors/laser_detectors.launch">
               <!-- arg name="laser" default="/kmo_navserver/laserscan0"/ -->
               <arg name="laser" default="/scan"/>
  </include>

  <!-- Leg detectors 
  This is an alternative to laser detector, but requires installing spencer from sources,
   as spencer_leg_detector_wrapper is not in deb and it depends on wg perception.
  -->

  <include file="$(find demo)/launch/detectors/leg_detectors.launch">
    <arg name="node_prefix" default="leg"/>
    <arg name="config_file" default="iliad.yaml"/>
    <arg name="scan" default="/kmo_navserver/laserscan0"/>               
  </include>




   <!-- People tracking -->
  <include file="$(find spencer_people_tracking_launch)/launch/tracking/freiburg_people_tracking.launch">
       <arg name="rgbd" default="true"/>
       <arg name="laser_low_confidence_detections" default="true"/>
  </include>





  <!-- VISUALIZATION -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config_file)"/>



</launch>
