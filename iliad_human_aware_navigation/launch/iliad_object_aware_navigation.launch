<?xml version="1.0"?>
    <!--
    
   -->
<launch>

    <arg name="robot_id" default="4"/>
    <arg name="sim" default="true"/>

    <!-- derived args -->
    <arg name="prefix" value="robot$(arg robot_id)"/>

    <!-- args from hri -->
    <arg name="map_frame_id"          default="/map_laser2d"/>
    <arg name="map_topic_name"        default="/maps/map_laser2d"/>
    <arg name="robotST_topic"         default = "/$(arg prefix)/robot_poseST"/>
    <arg name="robot_base_frame_id"   default="$(arg prefix)/base_link"/>
    
    <arg name="costmap_topic_name"        default = "/$(arg prefix)/object_costmap_node/costmap/costmap"/>
    <arg name="task_topic_name"           default = "/$(arg prefix)/control/task"/>

    <arg name="curr_cost_topic_name"      default = "/$(arg prefix)/object_aware/cost"/>

    <arg name="path_occ_grid_topic_name"  default = "/$(arg prefix)/object_aware/constraints_costmap_path"/>

    <!-- the group -->
    <group ns="$(arg prefix)">


           <!-- Publishes robot pose -->
      <node pkg="robot_pose_publisher" type="robot_pose_publisher" name="robot_poseST_publisher" output="screen">
          <param name="map_frame" value="$(arg map_frame_id)"/>
          <param name="base_frame" value="$(arg robot_base_frame_id)"/>
          <param name="is_stamped" value="true"/>
          <remap from="robot_pose" to="$(arg robotST_topic)"/>
      </node>

      <!-- Extracts current task cost from constraints costmap-->
      <node pkg="iliad_human_aware_navigation" type="iliad_task_cost_node.py" name="object_task_cost_node" output="screen" respawn="true">
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="robot_pose_topic_name"            type = "string" value="$(arg robotST_topic)"/>
        <param name="costmap_topic_name"               type = "string" value= "$(arg costmap_topic_name)"/>      
        <param name="task_topic_name"                  type = "string" value= "$(arg task_topic_name)"/>
        <param name="task_frame_id"                    type = "string" value= "$(arg map_frame_id)"/>
        
        <param name="path_occ_grid_topic_name"         type = "string" value= "$(arg path_occ_grid_topic_name)"/> 
        <param name="curr_cost_topic_name"             type = "string" value= "$(arg curr_cost_topic_name)"/>
        <param name="update_publish_period"            type = "double" value="0.1"/> 
      </node>
 
      <!-- read the object and replan if it is necesary -->
      <node pkg="iliad_human_aware_navigation" type="object_aware_plan_assessment.py" name="object_aware_plan_assessment_node" output="screen" respawn="true">
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="robot_pose_topic_name"      type = "string" value="$(arg robotST_topic)"/>
        <param name="curr_cost_topic_name"       type = "string" value= "$(arg curr_cost_topic_name)"/>
      </node>

      <!-- Run the costmap node to obstain just he obstacle layer -->
      <node name="object_costmap_node" pkg="costmap_2d" type="costmap_2d_node" >
        <rosparam file="$(find iliad_human_aware_navigation)/config/object_layer_costmap.yml" command="load" ns="costmap"/> 
      </node>

      <rosparam ns="object_costmap_node/costmap/" if="$(arg sim)">
        robot_base_frame: "base_link"
      </rosparam>

      
    </group>

      <!-- laser filter around the people detected     -->
      <node pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="hanp_laser_filter_floor">
        <remap from="scan" to="/$(arg prefix)/sensors/laser2d_floor"/>

        <remap from="scan_filtered" to="/$(arg prefix)/sensors/laser2d_floor/human_filtered"/>

          <remap from="hanp_laser_filter_floor/humans" to="/$(arg prefix)/human_perception/tracked_persons"/>

        <rosparam command="load" file="$(find iliad_human_aware_navigation)/config/human_laser_filter.yaml"/>
    </node>

</launch>






