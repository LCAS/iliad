<?xml version="1.0"?>

<!-- 
    Based on move_base.launch from nav_simulation package in iliad repo.  
    
-->
<launch>

      <arg name="robot_id"      default="1"/>
      <arg name="prefix"        default="robot$(arg robot_id)"/>
      <arg name="topic_prefix"  default="/robot$(arg robot_id)"/>
      
      <arg name="odom_topic" default="odom" />
      <arg name="cmd_vel_topic" default="controller/cmd_vel" />
      
      
      <!-- This is the real global planer, as a service.
            move_base global planner plugin is mostly a client to this
            one, with some extra parameters
      --> 
       <include file="$(find iliad_smp)/launch/generate_path_service.launch">
           <arg name="get_path_service_name" value="$(arg topic_prefix)/move_base/iliad_smp_planner/get_path"/>
       </include>  

      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
          <rosparam file="$(find iliad_smp_planner)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
          <rosparam file="$(find iliad_smp_planner)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
          <rosparam file="$(find iliad_smp_planner)/params/local_costmap_params.yaml" command="load" />
          <rosparam file="$(find iliad_smp_planner)/params/global_costmap_params.yaml" command="load" />

          <param name="clearing_rotation_allowed" value="false" /> <!-- Our carlike robot is not able to rotate in place -->

          <!--  
          rosparam file="$(find iliad_smp_planner)/params/base_local_planner_params.yaml" command="load" 
          -->

          <rosparam file="$(find iliad_smp_planner)/params/dwa_local_planner_params.yaml" command="load" />

           <!-- change dwa parameter that is robot-dependant -->
          <rosparam param="velocity_costmap_topic" subst_value="True">$(arg topic_prefix)/velocity_costmap_server/velocity_costmap</rosparam>

          <rosparam file="$(find iliad_smp_planner)/params/iliad_smp_global_planner_params.yaml" command="load" />
          
           <!-- change iliad_smp parameters that are robot-dependant -->
          <rosparam param="iliad_smp_planner/robot_id" subst_value="True">$(arg robot_id)</rosparam>
          <rosparam param="iliad_smp_planner/service_name" subst_value="True">$(arg topic_prefix)/move_base/iliad_smp_planner/get_path</rosparam>

          <rosparam file="$(find iliad_smp_planner)/params/move_base_params.yaml" command="load" />

          <param name="planner_frequency" value="1.0" />
          <param name="controller_frequency" value="2.0" />

          <param name="oscillation_timeout" value="10.0" />  <!-- How long to allow for oscillation before executing recovery behaviors.  0.0 == infinite timeout -->
          <param name="oscillation_distance" value="0.25" /> <!-- How far to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout  -->
          
          <remap from="cmd_vel" to="move_base/cmd_vel"/> 
          <remap from="odom" to="$(arg odom_topic)"/>
          <remap from="$(arg topic_prefix)/map" to="/map" />

      </node>

      <!-- Filters out laser points hitting robot frame/wheels  -->
      <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="safety_filter">
        <rosparam command="load" file="$(find nav_simulation)/params/safety_laser_filter.yaml" />
        <remap from="scan" to="safety_laser" />
        <remap from="scan_filtered" to="safety_laser_fil" />
      </node>
      
      <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="nav_filter">
        <rosparam command="load" file="$(find nav_simulation)/params/nav_laser_filter.yaml" />
        <remap from="scan" to="nav_laser" />
        <remap from="scan_filtered" to="nav_laser_fil" />
      </node>
      

      <!-- Casts from vtrans,vrot from move base to robot (vtrans,vrot) for motrix wheel in robot  -->
      <node pkg="twist_controller" type="velParser.py" name="velParser_node" output="screen">
          <param name="wheelsAxesDist" value="1.2"/>
          <param name="inPlacePhi" value="1.57"/>
          <param name="phiTol" value="0.01"/>
          <param name="useOmega" value="True"/>
          <param name="moveWhileOrienting" value="True"/>
          <param name="steer_pose_cmd_topic" value="steer_pose"/>
          <param name="in_cmd_topic" value="move_base/cmd_vel"/>
          <param name="out_cmd_topic" value="$(arg cmd_vel_topic)"/>
      </node>
        

      <!-- Publishes relative motor wheel position related to robot frame coordinates. Used by velParser -->
      <node pkg="robot_pose_publisher" type="robot_pose_publisher" name="steer_pose_publisher" output="screen">
          <param name="map_frame" value="$(arg prefix)/base_footprint"/>
          <param name="base_frame" value="$(arg prefix)/steer_link"/>
          <param name="is_stamped" value="true"/>
          <remap from="robot_pose" to="steer_pose"/>
      </node>
    
   

</launch>
