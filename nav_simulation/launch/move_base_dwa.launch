<?xml version="1.0"?>

<!--
    ROS navigation stack controller
    based on turtlebot move_base.launch

    This file is to be launched after starting robot driver and sensors (or any of its simulations in base_simulation).
    If local dwa plugin is enabled, this will be an human aware navigation stack.

    I.e.
    roslaunch base_simulation iliad_sim_ncfm_no_human.launch gazeboGui:=false rviz_config_file:=`rospack find nav_simulation`/rviz/iliad_cititruck_dwa_nav.rviz

    Or if you want to use with human aware navigation

    roslaunch base_simulation iliad_sim_ncfm_short_walk.launch gazeboGui:=false rviz_config_file:=`rospack find hri_simulation`/rviz/iliad_cititruck_dwa_nav_hri.rviz

-->
<launch>

      <arg name="robot_id" default="4"/>
      
      <arg name="prefix"        default="robot$(arg robot_id)"/>
      <arg name="topic_prefix"  default="/$(arg prefix)"/>
      
      <arg name="odom_topic" default="$(arg prefix)/odom_enc" />
      <arg name="cmd_vel_topic" default="$(arg topic_prefix)/control/controller/cmd_vel" />

      <arg name="map_frame" default="map_laser2d"/>
      <arg name="base_frame" default="$(arg prefix)/base_link"/>

      <!--group ns="$(arg prefix)"-->
        <!--
            This param needs to be set under this group, or
            robot_state_publisher won't publish tf properly
        -->
        <!--param name="tf_prefix" value="$(arg prefix)"/-->
      
        <!-- Filters out laser points hitting robot frame/wheels-->
        <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_2d_floor_filter">
          <rosparam command="load" file="$(find base_simulation)/params/safety_laser_filter.yaml" />
          <remap from="scan" to="$(arg topic_prefix)/sensors/laser2d_floor" />
          <remap from="scan_filtered" to="$(arg topic_prefix)/sensors/laser2d_floor_fil" />
        </node>

        <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser2d_top_filter">
	  <rosparam command="load" file="$(find base_simulation)/params/uol_nav_laser_filter.yaml" />
	  <remap from="scan" to="$(arg topic_prefix)/sensors/laser2d_top" />
	  <remap from="scan_filtered" to="$(arg topic_prefix)/sensors/laser2d_top_fil" />
        </node>

        <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
          <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/> 
          <remap from="odom" to="$(arg odom_topic)"/>
          <remap from="$(arg topic_prefix)/map" to="/maps/$(arg map_frame)" />
          

          <!-- common params -->
          <rosparam file="$(find nav_simulation)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
          <rosparam file="$(find nav_simulation)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
          <rosparam file="$(find nav_simulation)/params/local_costmap_params.yaml" command="load" />
          <rosparam file="$(find nav_simulation)/params/global_costmap_params.yaml" command="load" />

	  <rosparam param="local_costmap/obstacle_layer/nav_laser_scan_sensor/topic" subst_value="True">
               $(arg topic_prefix)/sensors/laser2d_top_fil
          </rosparam>
	  <rosparam param="local_costmap/obstacle_layer/safe_laser_scan_sensor/topic" subst_value="True">
               $(arg topic_prefix)/sensors/laser2d_floor_fil
          </rosparam>
	  <rosparam param="local_costmap/robot_base_frame" subst_value="True">
               $(arg prefix)/base_link
          </rosparam>

	  <rosparam param="global_costmap/obstacle_layer/nav_laser_scan_sensor/topic" subst_value="True">
               $(arg topic_prefix)/sensors/laser2d_top_fil
          </rosparam>
	  <rosparam param="global_costmap/obstacle_layer/safe_laser_scan_sensor/topic" subst_value="True">
               $(arg topic_prefix)/sensors/laser2d_floor_fil
          </rosparam>
	  <rosparam param="global_costmap/robot_base_frame" subst_value="True">
               $(arg prefix)/base_link
          </rosparam>

          <param name="clearing_rotation_allowed" value="false" /> <!-- Our carlike robot is not able to rotate in place -->
          <!-- How long to allow for oscillation before executing recovery behaviors.  0.0 == infinite timeout -->
          <param name="oscillation_timeout" value="10.0" />
          <!-- How far to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout  -->
          <param name="oscillation_distance" value="0.25" />

          <param name="base_global_planner" value="global_planner/GlobalPlanner" />
          <param name="planner_frequency" value="1.0" />
          <param name="planner_patience" value="5.0" />

          <param name="base_local_planner" value="dwa_local_planner_constraint/DWAPlannerROS" />
          <param name="controller_frequency" value="2.0" />
          <param name="controller_patience" value="15.0" />

	  <param name="map_frame" value="$(arg map_frame)"/>
	  <param name="base_frame" value="$(arg base_frame)"/>

          <rosparam file="$(find nav_simulation)/params/dwa_local_planner_params.yaml" command="load" />

          <rosparam file="$(find nav_simulation)/params/move_base_params.yaml" command="load" />

          <!-- change dwa parameters that is robot-dependant -->
          <rosparam param="velocity_costmap_topic" subst_value="True">$(arg topic_prefix)/velocity_costmap_server/velocity_costmap</rosparam>

        </node>

        <node pkg="rostopic" type="rostopic" name="fake_goal" args="pub /move_base_simple/goal geometry_msgs/PoseStamped '{header: { seq: 0,   stamp: {secs: 0, nsecs: 0}, frame_id: '$(arg prefix)/odom'}, pose: {  position: { x: 0.847, y: 44.703, z: -0.050}, orientation:{ x: 0.0,  y: 0.0, z: 0.179, w: 0.984}}}' --latch" output="screen"/>
     
      <!--/group-->  
</launch>
